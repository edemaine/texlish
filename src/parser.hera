```
import { generate } from './main.civet'
import { process } from './postprocess.civet'
import {
  commentForBody,
  commentForTextBody,
  getEndComment,
  trimEnd,
  trimEndComment,
} from './util.civet'

export const state = {
  indents: [ { token: '', level: 0 } ],
  styles: {},
  get currentIndent() {
    return state.indents.at(-1)
  }
}
export function getStateKey() {
  return state.currentIndent.level
}
```

Main
  Init Content -> $2

Init
  "" ->
    state.indents = [ { token: '', level: 0 } ]
    state.styles = {
      '*': '\\emph',
      '**': '\\textbf',
      '***': '\\defn',
      '@=': '\\label',
      '@': '\\ref',
      '#@': '\\pageref',
      '[[': '\\cite',
    }

Content
  Statement ( EOL Statement )* ->
    return [ $1, ...$2.flat() ]
  "" -> []

# First line starts mid-line, so uses Text; following lines assume start of line
# No Nested requirement; used in BracedContent where indentation doesn't matter
TextAndContent
  Text ( EOL Statement )* ->
    return [ $1, ...$2.flat() ]
  "" -> []

EOL
  /[ \t]*(\n|\r\n?|$)/ ->
    return {
      type: "EOL",
      token: $0,
      $loc,
    }

Statement
  Header
  MetaBlock
  Environment
  CommandWithColonArgument
  UnorderedList
  OrderedList
  TextLine

# One line of text at start of the line
# (can be empty, no newline consumption)
TextLine
  Indent Text ->
    return [ $1, ...$2 ]

# One line of text, starting in the middle of a line, for inline uses
# (can be empty, no newline consumption)
Text
  TextPart* InlineCommandWithColonArgument? ->
    if (!$2) return $1
    return [ ...$1, $2 ]

TextPart
  BracedContent
  Comment
  # @'long ref'
  /(@=|@|#@)('[^']*'|"[^"]*")/ ->
    return `${state.styles[$1]}{${$2.slice(1, -1)}}`
  # @ref without spaces and without grabbing trailing punctuation
  /(@=|@|#@)([^\s'"][^\s]*)(?<!\p{Punctuation})/ ->
    return `${state.styles[$1]}{${$2}}`
  /\[\[(.*?)\]\]/ ->
    return `${state.styles['[[']}{${$1}}`
  /([\^_])(\d{2,}|[a-zA-Z]{2,})/ ->
    return `${$1}{${$2}}`
  [\^_] ParenthesizedContent ->
    // $2[1] strips the parens
    return [ $1[0], '{', $2[1], '}' ]
  # Left- *and* right-flanking delimiter according to below definitions.
  /(?<![\*\s]|^)(\*+)(?![\*\s]|$)(?:(?![\p{Punctuation}\p{Symbol}])(?<![\p{Punctuation}\p{Symbol}]\1)|(?=[\p{Punctuation}\p{Symbol}])(?<=(?:[\p{Punctuation}\p{Symbol}])\1))/ ->
    return {
      type: "Delimiter",
      open: true,
      close: true,
      styles: state.styles,
      symbol: $1,
      token: $1,
    }
  /(?<![_\s]|^)(_+)(?![_\s]|$)(?:(?![\p{Punctuation}\p{Symbol}])(?<![\p{Punctuation}\p{Symbol}]\1)|(?=[\p{Punctuation}\p{Symbol}])(?<=(?:[\p{Punctuation}\p{Symbol}])\1))/ ->
    return $1
  # https://spec.commonmark.org/0.31.2/#emphasis-and-strong-emphasis
  # defines "left-flanking delimiter run" as (1) not followed by a space, and
  # (2a) not followed by punctuation, or (2b) [followed by punctuation and]
  # preceded by whitespace or punctuation.
  /(?<!\*)(\*+)(?![\*\s]|$)(?:(?![\p{Punctuation}\p{Symbol}])|(?<=(?:^|\s|[\p{Punctuation}\p{Symbol}])\1))|(?<!_)(_+)(?![_\s]|$)(?:(?![\p{Punctuation}\p{Symbol}])|(?<=(?:^|\s|[\p{Punctuation}\p{Symbol}])\1))/ ->
    const symbol = $1 ?? $2
    return {
      type: "Delimiter",
      open: true,
      close: false,
      styles: state.styles,
      symbol,
      token: symbol,
    }
  # "Right-flanking delimiter run" is (1) not preceded by a space, and
  # (2a) not preceded by punctuation, or (2b) [preceded by punctuation and]
  # followed by whitespace or punctuation.
  /(?<![\*\s]|^)(\*+)(?!\*)(?:(?<![\p{Punctuation}\p{Symbol}]\1)|(?=$|\s|[\p{Punctuation}\p{Symbol}]))|(?<![_\s]|^)(_+)(?!_)(?:(?<![\p{Punctuation}\p{Symbol}]\1)|(?=$|\s|[\p{Punctuation}\p{Symbol}]))/ ->
    const symbol = $1 ?? $2
    return {
      type: "Delimiter",
      open: false,
      close: true,
      styles: state.styles,
      symbol,
      token: symbol,
    }
  # Leave trailing InlineCommandWithColonArgument for TextLine to parse
  !InlineCommandWithColonArgument Command -> $2
  # Skip to next interesting character
  /[^\r\n\\{}%][^\r\n@#\[\\\^_{}()%\*]*/

TrimmedText
  Text:t ->
    if (!Array.isArray(t)) return t.trim()
    t = [...t]
    if (typeof t[0] === 'string') t[0] = t[0].trimStart()
    const last = t.length - 1
    if (typeof t[last] === 'string') t[last] = t[last].trimEnd()
    return t

BracedContent
  "{":open TextAndContent:body "}":close ->
    let comment
    [body, comment] = commentForBody(body)
    // Drop single %
    if (comment?.token === "%" ) {
      comment = undefined
    }
    return {
      type: "Braced",
      body,
      children: [
        open,
        body,
        close,
        comment,
      ]
    }

Comment
  /%[^\r\n]*/ ->
    return {
      type: "Comment",
      token: $0,
      $loc,
    }

Command
  /\\([a-zA-Z@]+|.)/ ->
    return {
      type: "Command",
      token: $0,
    }

ParenthesizedContent
  "(" ParenBalancedContent ")"

ParenBalancedContent
  ParenthesizedContent
  TextPart

Header
  /(!+|\.*)(#+)(\*?)\s+/ TrimmedText:title ->
    let [, dot, hash, star] = $1
    let dots = dot.length
    let hashes = hash.length
    let command =
      dot[0] === "!" ? ( dots > 1 || hashes > 1 ? '\\part' : '\\chapter' ) :
      dots ? ( dots > 1 || hashes > 1 ? '\\subparagraph' : '\\paragraph' ) :
      `\\${'sub'.repeat(hashes-1)}section`
    if (star) command += '*'
    return {
      type: "Header",
      subtype: command,
      children: [ command, '{', title, '}' ],
    }

Environment
  # use NestedItem* instead of NestedBody so that we can PushIndent early
  # (in case ColonArgument involves multiple lines)
  &/[ \t]*>/ Indent:indent PushIndent ( />[ \t]*([^:\s\[%]+)/ ( InlineColonArgument / TrimmedText ) NestedItem* )?:content PopIndent ->
    if (!content) return $skip
    let [ env, first, body ] = content
    env = env[1].trim()
    return {
      type: "Environment",
      env,
      children: [
        indent,
        `\\begin{${env}}`,
        first,
        body,
        "\n",
        indent,
        `\\end{${env}}`,
      ]
    }

CommandWithColonArgument
  Indent:indent Command:command ColonArgument:arg

# Inline version prevents combining same-line and indented content
InlineCommandWithColonArgument
  Command InlineColonArgument

ColonArgument
  ":" ArgumentAfterColon -> $2

InlineColonArgument
  ":" InlineArgumentAfterColon -> $2

ArgumentAfterColon
  NestedArgumentList
  TrimmedText:text NestedBody:body ->
    // If nothing on first line, comment out the newline
    if (!text.length && body.length) text = "%"
    let comment
    [text, body, comment] = commentForTextBody(text, body)
    const textBody = [ text, body ]
    return {
      type: "Braced",
      body: textBody,
      children: [
        "{",
        textBody,
        "}",
        comment,
      ]
    }

InlineArgumentAfterColon
  NestedArgumentList
  NonEmptyNestedBody:body ->
    let comment
    [body, comment] = commentForBody(body)
    return {
      type: "Braced",
      body,
      children: [
        "{%",
        body,
        "}",
        comment,
      ]
    }
  TrimmedText:body ->
    let comment
    [body, comment] = commentForBody(body)
    return {
      type: "Braced",
      body,
      children: [
        "{",
        body,
        "}",
        comment,
      ]
    }

MetaBlock
  &/[ \t]*>>/ Indent:indent ">>" /\s*/ MetaCommand:cmd -> [indent, cmd]

MetaCommand
  MetaStyles
  MetaUse
  MetaPreamble

MetaStyles
  "styles" NestedAssignments:body ->
    // Avoid aliasing so that we can copy by reference in Delimiters
    state.styles = {...state.styles}
    for (const [key, value] of body) {
      state.styles[key] = generate(value)
    }
    return '\0'  // eat following newline

NestedAssignments
  PushIndent NestedAssignment*:items PopIndent -> items

NestedAssignment
  Nested Indent /[^\s:]+/:key /\s+:?=\s*/ Text:value ->
    return [ key[0], value ]

MetaUse
  "use" [ \t]+ UseItem:item -> item
  "use" NestedUseList:list -> list

UseItem
  Bullet? /[^:\r\n]+/:name UseColonArgument?:arg ->
    name = name[0]
    return {
      type: "Use",
      children: [
        '\\usepackage',
        arg,
        `{${name}}`
      ]
    }

NestedUseList
  PushIndent NestedUseItem*:items PopIndent ->
    if (!items.length) return $skip
    return {
      type: "Uses",
      children: items
    }

NestedUseItem
  Nested Indent UseItem ->
    return $0

UseColonArgument
  ":" UseArgument ->
    return [
      "[",
      $2,
      "]",
    ]

UseArgument
  NestedUseArgumentList
  NonEmptyNestedBody
  TrimmedText

NestedUseArgumentList
  PushIndent ( NonstrictlyNested UseArgumentList )?:content PopIndent ->
    if (!content) return $skip
    return content

UseArgumentList
  &/\s*[*\-~]/ &Indent PushIndent ( UseArgumentBullet ( SameLevel UseArgumentBullet )* )?:content PopIndent ->
    if (!content) return $skip
    // Add commas between bullets
    let [ first, rest ] = content
    rest = rest.map(([ eol, bullet ]) => [ ",", eol, bullet ])
    return [ first, rest ]

UseArgumentBullet
  Indent:indent /([*\-~])([ \t]+)/ Text:text NestedBody:body ->
    let [ , bullet, space ] = $2
    return [
      indent,
      space, " ", // indent the same as the bullet
      text,
      body,
    ]

NonEmptyNestedBody
  NestedBody ->
    if (!$1.length) return $skip
    return $1

# can be empty; if not desired, use NonEmptyNestedBody
NestedBody
  PushIndent NestedItem* PopIndent -> $2

NestedItem
  Nested Statement

MetaPreamble
  "preamble" ( /[ \t]+/ Text )?:text NestedBody:body ->
    if (text) text = text[1]
    const textBody = [ text, body ]
    return {
      type: "Preamble",
      textBody,
      children: [ textBody ],
    }

UnorderedList
  &/[ \t]*[*\-~]/ Indent:indent PushIndent ( UnorderedBullet ( SameLevel Indent UnorderedBullet )* )?:items PopIndent ->
    if (!items) return $skip
    return {
      type: "List",
      subtype: "itemize",
      children: [
        indent,
        "\\begin{itemize}",
        "\n",
        indent,
        items,
        "\n",
        indent,
        "\\end{itemize}",
      ]
    }

UnorderedBullet
  Bullet:bullet Text:text NestedBody:body ->
    let space = bullet[1]
    return [ '\\item', space, text, body ]

Bullet
  /([*\-~])([ \t]+|(?=[\r\n]))/ -> [ $1, $2 ]

OrderedList
  &/[ \t]*\d+\./ Indent:indent PushIndent ( OrderedBullet ( SameLevel Indent OrderedBullet )* )?:items PopIndent ->
    if (!items) return $skip
    return {
      type: "List",
      subtype: "enumerate",
      children: [
        indent,
        "\\begin{enumerate}",
        "\n",
        indent,
        items,
        "\n",
        indent,
        "\\end{enumerate}",
      ]
    }

OrderedBullet
  /\d+\.([ \t]+|(?=[\r\n]))/ Text:text NestedBody:body ->
    let space = $1[1]
    return [ '\\item', space, text, body ]

NestedArgumentList
  PushIndent ( NonstrictlyNested ArgumentList )?:content PopIndent ->
    if (!content) return $skip
    return content

ArgumentList
  &/\s*[*\-~]/ &Indent PushIndent ( ArgumentBullet ( SameLevel ArgumentBullet )* )?:content PopIndent ->
    if (!content) return $skip
    return content

ArgumentBullet
  Indent:indent Bullet:bullet Text:text NestedBody:body ->
    let [ symbol, space ] = bullet
    let comment
    [text, body, comment] = commentForTextBody(text, body)
    return [
      indent,
      space, // indent the same as the bullet, except 1 for *-~ and {
      symbol === '~' ? '[' : '{',
      text,
      body,
      symbol === '~' ? ']' : '}',
      comment,
    ]

## Indentation management, inspired by Civet's parser.hera

Indentation
  /[ \t]*/ ->
    const numTabs = $0.match(/\t/g)?.length ?? 0
    const level = numTabs * 8 + ($0.length - numTabs)
    return {
      type: "Indent",
      token: $0,
      level,
      $loc,
    }

Indent
  Indentation ->
    return state.thisLineIndent = $1

PushIndent
  "" ->
    //const {level} = indent
    //if (level < state.currentIndent.level) return $skip
    state.indents.push(state.thisLineIndent)

PopIndent
  "" ->
    state.indents.pop()

Nested
  EOL &IndentedFurther -> $1

IndentedFurther
  Indentation:indent ->
    if (indent.level <= state.currentIndent.level) return $skip
    return $0

SameLevel
  EOL &IndentedSame -> $1

IndentedSame
  Indentation:indent ->
    if (indent.level !== state.currentIndent.level) return $skip
    return $0

NonstrictlyNested
  EOL &IndentedNotLess -> $1

IndentedNotLess
  Indentation:indent ->
    if (indent.level < state.currentIndent.level) return $skip
    return $0

SaveIndent
  "" ->
    return state.thisLineIndent
